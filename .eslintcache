[{"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\index.js":"1","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\shared\\constants.js":"2","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\App.jsx":"3","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\store.js":"4","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\routes\\LoginRoutes.jsx":"5","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Dashboard.jsx":"6","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\FindForm.jsx":"7","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\MemberRow.jsx":"8","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\FindMemberModal.jsx":"9","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\MenuScreen.jsx":"10","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyModal.jsx":"11","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyInput.jsx":"12","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyForm.jsx":"13","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginContainer.jsx":"14","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginField.jsx":"15"},{"size":325,"mtime":1606257461394,"results":"16","hashOfConfig":"17"},{"size":67,"mtime":1606177381604,"results":"18","hashOfConfig":"17"},{"size":623,"mtime":1606601389888,"results":"19","hashOfConfig":"17"},{"size":247,"mtime":1606257382125,"results":"20","hashOfConfig":"17"},{"size":359,"mtime":1606268168119,"results":"21","hashOfConfig":"17"},{"size":21036,"mtime":1606276172610,"results":"22","hashOfConfig":"17"},{"size":8740,"mtime":1606428327084,"results":"23","hashOfConfig":"17"},{"size":6888,"mtime":1606429434379,"results":"24","hashOfConfig":"17"},{"size":2049,"mtime":1606429384129,"results":"25","hashOfConfig":"17"},{"size":1515,"mtime":1606359428221,"results":"26","hashOfConfig":"17"},{"size":1528,"mtime":1606431029853,"results":"27","hashOfConfig":"17"},{"size":915,"mtime":1606434072191,"results":"28","hashOfConfig":"17"},{"size":5153,"mtime":1606457023867,"results":"29","hashOfConfig":"17"},{"size":4536,"mtime":1606613645444,"results":"30","hashOfConfig":"17"},{"size":1342,"mtime":1606613325883,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1keiamg",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\index.js",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\shared\\constants.js",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\App.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\store.js",[],["67","68"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\routes\\LoginRoutes.jsx",["69"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Dashboard.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\FindForm.jsx",["70","71","72","73","74","75","76","77","78","79","80","81","82"],"import React, { useState } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport {\r\n    Form,\r\n    Grid,\r\n    Input,\r\n    Button,\r\n    Message,\r\n    Icon,\r\n    Divider,\r\n    Container,\r\n    Step,\r\n} from 'semantic-ui-react';\r\nimport { reset } from 'redux-form';\r\nimport { formValueSelector } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport MemberModalButton from './FindMemberModal';\r\nimport BuyModalButton from './BuyModal';\r\nimport Proptype from 'prop-types';\r\n\r\nconst FindForm = (props) => {\r\n    const {\r\n        handleSubmit,\r\n        findForm: { submitSucceeded },\r\n        phone,\r\n        membership,\r\n        firstName,\r\n        lastName,\r\n        clearForm,\r\n        phoneProps,\r\n        history,\r\n    } = props;\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const loginUser = (values) => {\r\n        console.log('LoginForm was submitted', { values });\r\n    };\r\n\r\n    const clearErrorMessage = () => {\r\n        if (errorMessage) {\r\n            setErrorMessage('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            textAlign='center'\r\n            style={{ height: '100vh' }}\r\n            verticalAlign='middle'>\r\n            <Grid.Column style={{ maxWidth: 450 }}>\r\n                {/* <Form.Group inline>\r\n                    <Input\r\n                        inverted\r\n                        action={{\r\n                            size: 'massive',\r\n                            color: 'blue',\r\n                            labelPosition: 'right',\r\n                            icon: 'search',\r\n                            content: 'Find',\r\n                        }}\r\n                        label={{\r\n                            pointing: 'right',\r\n                            color: 'white',\r\n                        }}\r\n                        size='massive'\r\n                        actionPosition='right'\r\n                        placeholder='Search...'\r\n                        // defaultValue='52.03'\r\n                    />\r\n                    <Input\r\n                        inverted\r\n                        action={{\r\n                            size: 'massive',\r\n                            color: 'blue',\r\n                            labelPosition: 'right',\r\n                            icon: 'search',\r\n                            content: 'Find',\r\n                        }}\r\n                        label={{\r\n                            pointing: 'right',\r\n                            color: 'white',\r\n                        }}\r\n                        size='massive'\r\n                        actionPosition='right'\r\n                        placeholder='Search...'\r\n                        // defaultValue='52.03'\r\n                    />\r\n                </Form.Group> */}\r\n\r\n                {/* <Button.Group size='massive'>\r\n                    <Button\r\n                        size='large'\r\n                        color='blue'\r\n                        content='Find'\r\n                        // icon='fork'\r\n                        icon='search'\r\n                        label={{\r\n                            // as: 'a',\r\n                            basic: true,\r\n                            color: 'blue',\r\n                            pointing: 'right',\r\n                            // content: '50',\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        size='large'\r\n                        color='vk'\r\n                        content='Add'\r\n                        // icon='fork'\r\n                        icon='flask'\r\n                        label={{\r\n                            as: 'a',\r\n                            basic: true,\r\n                            color: 'blue',\r\n                            pointing: 'right',\r\n                            content: '50',\r\n                        }}\r\n                    />\r\n                    <Button>Two</Button>\r\n                    <Button.Or />\r\n                    <Button>Three</Button>\r\n                </Button.Group> */}\r\n                <Form onSubmit={handleSubmit(loginUser)} size='large'>\r\n                    <Field {...phoneProps} onFocus={clearErrorMessage} />\r\n                    <Field\r\n                        component={Form.Input}\r\n                        name='membership'\r\n                        placeholder='xxxxxxx'\r\n                        focus\r\n                        size='massive'\r\n                        type='text'\r\n                        fluid\r\n                        icon='address card'\r\n                        iconPosition='left'\r\n                        transparent\r\n                        inverted\r\n                        onFocus={() => setErrorMessage('')}\r\n                    />\r\n\r\n                    <Field\r\n                        component={Form.Input}\r\n                        name='firstName'\r\n                        placeholder='First Name'\r\n                        focus\r\n                        size='massive'\r\n                        type='text'\r\n                        fluid\r\n                        icon='id badge'\r\n                        iconPosition='left'\r\n                        transparent\r\n                        inverted\r\n                        onFocus={() => setErrorMessage('')}\r\n                    />\r\n                    <Field\r\n                        component={Form.Input}\r\n                        name='lastName'\r\n                        placeholder='Last Name'\r\n                        focus\r\n                        size='massive'\r\n                        type='text'\r\n                        fluid\r\n                        icon='id badge'\r\n                        iconPosition='left'\r\n                        transparent\r\n                        inverted\r\n                        onFocus={() => setErrorMessage('')}\r\n                    />\r\n                    <MemberModalButton />\r\n                    {/* <BuyModalButton /> */}\r\n                    <Form.Button\r\n                        circular\r\n                        fluid\r\n                        size='massive'\r\n                        color='blue'\r\n                        content='Logout'\r\n                        icon='sign-out'\r\n                        labelPosition='right'\r\n                        onClick={(event, data) => {\r\n                            event.preventDefault();\r\n                            history.push('/');\r\n                        }}\r\n                    />\r\n                </Form>\r\n                {errorMessage ? (\r\n                    <Message icon color='pink'>\r\n                        <Icon name='circle notched' loading />\r\n                        <Message.Header>{errorMessage}</Message.Header>\r\n                    </Message>\r\n                ) : null}\r\n                {/* <Form.Group>\r\n                    <Divider hidden />\r\n                    <Message>\r\n                        <Message.Header>Form data:</Message.Header>\r\n                        <pre>\r\n                            {JSON.stringify(\r\n                                {\r\n                                    phone,\r\n                                    membership,\r\n                                    firstName,\r\n                                    lastName,\r\n                                    submitSucceeded,\r\n                                },\r\n                                null,\r\n                                2\r\n                            )}\r\n                        </pre>\r\n                    </Message>\r\n                </Form.Group> */}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nFindForm.defaultProps = {\r\n    phoneProps: {\r\n        className: 'findPhoneField',\r\n        component: Form.Input,\r\n        name: 'phone',\r\n        type: 'tel',\r\n        placeholder: '(408)-123-4567',\r\n        focus: true,\r\n        size: 'massive',\r\n        fluid: true,\r\n        icon: 'phone',\r\n        iconPosition: 'left',\r\n        transparent: true,\r\n        inverted: true,\r\n    },\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    const selectFormData = formValueSelector('find');\r\n    return {\r\n        phone: selectFormData(state, 'phone'),\r\n        membership: selectFormData(state, 'membership'),\r\n        firstName: selectFormData(state, 'firstName'),\r\n        lastName: selectFormData(state, 'lastName'),\r\n        findForm: state.form.find\r\n            ? {\r\n                  values: state.form.find.values,\r\n                  submitSucceeded: state.form.find.submitSucceeded,\r\n              }\r\n            : {},\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        clearForm: () => dispatch(reset('find')),\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(reduxForm({ form: 'find' })(FindForm));\r\n",["83","84"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\MemberRow.jsx",["85","86","87"],"import React from 'react';\r\nimport { List, Button, Modal, Icon } from 'semantic-ui-react';\r\nimport BuyForm from './BuyForm';\r\nimport BuyModal from './BuyModal';\r\n\r\nconst MemberRow = (props) => {\r\n    const [open, openBuyModal] = React.useState(false);\r\n\r\n    return (\r\n        <List verticalAlign='middle' size='huge' inverted>\r\n            <List.Item>\r\n                <List.Content floated='right'>\r\n                    <BuyModal\r\n                        setOpen={openBuyModal}\r\n                        open={open}\r\n                        hideMemberRow={props.hideRow}\r\n                    />\r\n\r\n                    {!props.hide ? (\r\n                        <>\r\n                            <Button\r\n                                // focus\r\n                                size='large'\r\n                                color='pink'\r\n                                content='Buy'\r\n                                labelPosition='right'\r\n                                icon='plus cart'\r\n                                onClick={() => {\r\n                                    openBuyModal(true);\r\n                                    props.hideRow(true);\r\n                                }}\r\n                            />\r\n                            <Button\r\n                                // focus\r\n                                size='large'\r\n                                color='facebook'\r\n                                content='Renew'\r\n                                labelPosition='right'\r\n                                icon='redo'\r\n                            />\r\n                            <Button\r\n                                // focus\r\n                                size='large'\r\n                                color='twitter'\r\n                                content='Edit'\r\n                                labelPosition='right'\r\n                                icon='edit'\r\n                            />\r\n                            <Button\r\n                                // focus\r\n                                size='large'\r\n                                color='grey'\r\n                                content='Invoice'\r\n                                labelPosition='right'\r\n                                icon='sticky note'\r\n                            />\r\n                        </>\r\n                    ) : null}\r\n                    {/* <Button\r\n                        // focus\r\n                        size='large'\r\n                        color='facebook'\r\n                        content='Renew'\r\n                        labelPosition='right'\r\n                        icon='redo'\r\n                    />\r\n                    <Button\r\n                        // focus\r\n                        size='large'\r\n                        color='twitter'\r\n                        content='Edit'\r\n                        labelPosition='right'\r\n                        icon='edit'\r\n                    />\r\n                    <Button\r\n                        // focus\r\n                        size='large'\r\n                        color='grey'\r\n                        content='Invoice'\r\n                        labelPosition='right'\r\n                        icon='sticky note'\r\n                    /> */}\r\n                </List.Content>\r\n                <List.Content>\r\n                    {!props.hide ? (\r\n                        <>\r\n                            {' '}\r\n                            <Button\r\n                                size='large'\r\n                                color='grey'\r\n                                content='302039'\r\n                                icon='gg'\r\n                                label={{\r\n                                    basic: false,\r\n                                    color: 'grey',\r\n                                    pointing: 'right',\r\n                                    // corner: 'left',\r\n                                    // content: '200',\r\n                                }}\r\n                            />\r\n                            <Button\r\n                                size='large'\r\n                                color='red'\r\n                                content='Hung Quach'\r\n                                icon='random'\r\n                                label={{\r\n                                    basic: false,\r\n                                    color: 'red',\r\n                                    pointing: 'right',\r\n                                    // content: '200',\r\n                                }}\r\n                            />\r\n                            <Button\r\n                                size='large'\r\n                                color='blue'\r\n                                content='Gallon Remaining'\r\n                                // icon='fork'\r\n                                icon='flask'\r\n                                label={{\r\n                                    as: 'a',\r\n                                    basic: true,\r\n                                    color: 'blue',\r\n                                    pointing: 'right',\r\n                                    content: '50',\r\n                                }}\r\n                            />\r\n                        </>\r\n                    ) : null}\r\n                    {/* <Button\r\n                        size='large'\r\n                        color='grey'\r\n                        content='302039'\r\n                        icon='gg'\r\n                        label={{\r\n                            basic: false,\r\n                            color: 'grey',\r\n                            pointing: 'right',\r\n                            // corner: 'left',\r\n                            // content: '200',\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        size='large'\r\n                        color='red'\r\n                        content='Hung Quach'\r\n                        icon='random'\r\n                        label={{\r\n                            basic: false,\r\n                            color: 'red',\r\n                            pointing: 'right',\r\n                            // content: '200',\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        size='large'\r\n                        color='blue'\r\n                        content='Gallon Remaining'\r\n                        // icon='fork'\r\n                        icon='flask'\r\n                        label={{\r\n                            as: 'a',\r\n                            basic: true,\r\n                            color: 'blue',\r\n                            pointing: 'right',\r\n                            content: '50',\r\n                        }}\r\n                    /> */}\r\n                </List.Content>\r\n            </List.Item>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default MemberRow;\r\n","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\FindMemberModal.jsx",[],["88","89"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\MenuScreen.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyModal.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyInput.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyForm.jsx",["90"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginContainer.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginField.jsx",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":17},{"ruleId":"95","severity":1,"message":"99","line":6,"column":5,"nodeType":"97","messageId":"98","endLine":6,"endColumn":10},{"ruleId":"95","severity":1,"message":"100","line":7,"column":5,"nodeType":"97","messageId":"98","endLine":7,"endColumn":11},{"ruleId":"95","severity":1,"message":"101","line":10,"column":5,"nodeType":"97","messageId":"98","endLine":10,"endColumn":12},{"ruleId":"95","severity":1,"message":"102","line":11,"column":5,"nodeType":"97","messageId":"98","endLine":11,"endColumn":14},{"ruleId":"95","severity":1,"message":"103","line":12,"column":5,"nodeType":"97","messageId":"98","endLine":12,"endColumn":9},{"ruleId":"95","severity":1,"message":"104","line":18,"column":8,"nodeType":"97","messageId":"98","endLine":18,"endColumn":22},{"ruleId":"95","severity":1,"message":"105","line":19,"column":8,"nodeType":"97","messageId":"98","endLine":19,"endColumn":16},{"ruleId":"95","severity":1,"message":"106","line":24,"column":21,"nodeType":"97","messageId":"98","endLine":24,"endColumn":36},{"ruleId":"95","severity":1,"message":"107","line":25,"column":9,"nodeType":"97","messageId":"98","endLine":25,"endColumn":14},{"ruleId":"95","severity":1,"message":"108","line":26,"column":9,"nodeType":"97","messageId":"98","endLine":26,"endColumn":19},{"ruleId":"95","severity":1,"message":"109","line":27,"column":9,"nodeType":"97","messageId":"98","endLine":27,"endColumn":18},{"ruleId":"95","severity":1,"message":"110","line":28,"column":9,"nodeType":"97","messageId":"98","endLine":28,"endColumn":17},{"ruleId":"95","severity":1,"message":"111","line":29,"column":9,"nodeType":"97","messageId":"98","endLine":29,"endColumn":18},{"ruleId":"91","replacedBy":"112"},{"ruleId":"93","replacedBy":"113"},{"ruleId":"95","severity":1,"message":"114","line":2,"column":24,"nodeType":"97","messageId":"98","endLine":2,"endColumn":29},{"ruleId":"95","severity":1,"message":"115","line":2,"column":31,"nodeType":"97","messageId":"98","endLine":2,"endColumn":35},{"ruleId":"95","severity":1,"message":"116","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":15},{"ruleId":"91","replacedBy":"117"},{"ruleId":"93","replacedBy":"118"},{"ruleId":"95","severity":1,"message":"119","line":4,"column":10,"nodeType":"97","messageId":"98","endLine":4,"endColumn":18},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'LoginForm' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","'Button' is defined but never used.","'Divider' is defined but never used.","'Container' is defined but never used.","'Step' is defined but never used.","'BuyModalButton' is defined but never used.","'Proptype' is defined but never used.","'submitSucceeded' is assigned a value but never used.","'phone' is assigned a value but never used.","'membership' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'clearForm' is assigned a value but never used.",["120"],["121"],"'Modal' is defined but never used.","'Icon' is defined but never used.","'BuyForm' is defined but never used.",["120"],["121"],"'BuyInput' is defined but never used.","no-global-assign","no-unsafe-negation"]