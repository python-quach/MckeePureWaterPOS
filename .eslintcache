[{"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\shared\\constants.js":"1","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginGrid.jsx":"2","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\Login.jsx":"3","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Grid\\Grid.jsx":"4","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\store.js":"5","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyModal.jsx":"6","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginForm.jsx":"7","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginButton.jsx":"8","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\FindForm.jsx":"9","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\index.js":"10","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginDebug.jsx":"11","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Dashboard.jsx":"12","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\App.jsx":"13","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\Find.jsx":"14","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindField.jsx":"15","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindButton.jsx":"16","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindForm.jsx":"17","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindLogoutButton.jsx":"18","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindModal.jsx":"19","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\FindMemberModal.jsx":"20","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\MemberRow.jsx":"21","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindMembershipButton.jsx":"22","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\types.js":"23","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindModalHeader.jsx":"24","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindModalCloseButton.jsx":"25","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindAccountInput.jsx":"26","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindNameInput.jsx":"27","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Membership\\Membership.jsx":"28","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Debug\\DebugMessage.jsx":"29","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\reducers.js":"30","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginField.jsx":"31","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Grid\\FindPhoneInput.jsx":"32","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Portal\\BuyPortal.jsx":"33","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyInput.jsx":"34","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyForm.jsx":"35","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Portal\\MembershipPortal.jsx":"36","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindFormButton.jsx":"37","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Portal\\AccountPortal.jsx":"38"},{"size":371,"mtime":1607727713949,"results":"39","hashOfConfig":"40"},{"size":476,"mtime":1606623088205,"results":"41","hashOfConfig":"40"},{"size":4992,"mtime":1607618637404,"results":"42","hashOfConfig":"40"},{"size":473,"mtime":1606623429061,"results":"43","hashOfConfig":"40"},{"size":415,"mtime":1607488121895,"results":"44","hashOfConfig":"40"},{"size":1754,"mtime":1607012898410,"results":"45","hashOfConfig":"40"},{"size":1218,"mtime":1607105274826,"results":"46","hashOfConfig":"40"},{"size":1943,"mtime":1606706941401,"results":"47","hashOfConfig":"40"},{"size":5134,"mtime":1606691876711,"results":"48","hashOfConfig":"40"},{"size":325,"mtime":1606257461394,"results":"49","hashOfConfig":"40"},{"size":376,"mtime":1606613325284,"results":"50","hashOfConfig":"40"},{"size":21036,"mtime":1606276172610,"results":"51","hashOfConfig":"40"},{"size":892,"mtime":1607380062011,"results":"52","hashOfConfig":"40"},{"size":8180,"mtime":1608007837622,"results":"53","hashOfConfig":"40"},{"size":1478,"mtime":1606971209791,"results":"54","hashOfConfig":"40"},{"size":1962,"mtime":1606691437861,"results":"55","hashOfConfig":"40"},{"size":5748,"mtime":1607902396845,"results":"56","hashOfConfig":"40"},{"size":1018,"mtime":1606762734515,"results":"57","hashOfConfig":"40"},{"size":3811,"mtime":1607018214562,"results":"58","hashOfConfig":"40"},{"size":2184,"mtime":1606867602502,"results":"59","hashOfConfig":"40"},{"size":4531,"mtime":1607018170537,"results":"60","hashOfConfig":"40"},{"size":852,"mtime":1606865435925,"results":"61","hashOfConfig":"40"},{"size":399,"mtime":1607532629134,"results":"62","hashOfConfig":"40"},{"size":230,"mtime":1606867679787,"results":"63","hashOfConfig":"40"},{"size":430,"mtime":1606867536055,"results":"64","hashOfConfig":"40"},{"size":1319,"mtime":1607123383982,"results":"65","hashOfConfig":"40"},{"size":2359,"mtime":1607393215654,"results":"66","hashOfConfig":"40"},{"size":4413,"mtime":1606880872215,"results":"67","hashOfConfig":"40"},{"size":323,"mtime":1606884213970,"results":"68","hashOfConfig":"40"},{"size":2324,"mtime":1607558122500,"results":"69","hashOfConfig":"40"},{"size":1342,"mtime":1606613325883,"results":"70","hashOfConfig":"40"},{"size":2198,"mtime":1608007837624,"results":"71","hashOfConfig":"40"},{"size":2622,"mtime":1607112923440,"results":"72","hashOfConfig":"40"},{"size":915,"mtime":1606434072191,"results":"73","hashOfConfig":"40"},{"size":8740,"mtime":1607559969261,"results":"74","hashOfConfig":"40"},{"size":5065,"mtime":1607619561712,"results":"75","hashOfConfig":"40"},{"size":1984,"mtime":1607115051919,"results":"76","hashOfConfig":"40"},{"size":12819,"mtime":1608007837625,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1keiamg",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\shared\\constants.js",[],["169","170"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginGrid.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\Login.jsx",["171"],"import React, { useEffect, useState } from 'react';\r\nimport { reduxForm, reset, formValueSelector } from 'redux-form';\r\nimport { Header, Icon, Divider } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { channels } from '../../../shared/constants';\r\nimport LoginDebug from './LoginDebug';\r\nimport LoginForm from './LoginForm';\r\nimport LoginGrid from '../Grid/Grid';\r\nimport * as actionTypes from '../../../types';\r\nconst { ipcRenderer } = window;\r\n\r\nfunction LoginContainer(props) {\r\n    const {\r\n        submitSucceeded,\r\n        username,\r\n        password,\r\n        clearForm,\r\n        history,\r\n        login,\r\n        focusInput,\r\n        handleSubmit,\r\n    } = props;\r\n\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [iconColor, setIconColor] = useState('blueIcon');\r\n\r\n    useEffect(() => {\r\n        errorMessage ? setIconColor('whiteIcon') : setIconColor('blueIcon');\r\n    }, [errorMessage]);\r\n\r\n    // useEffect(() => {\r\n    //     if (!username && !password && !submitSucceeded)\r\n    //         console.log('Login Form:', { username, password, submitSucceeded });\r\n    // }, [submitSucceeded, username, password, clearForm, history, login]);\r\n\r\n    useEffect(() => {\r\n        const showInvalidButton = (error) => {\r\n            setErrorMessage(error);\r\n            clearForm();\r\n        };\r\n\r\n        const redirectUserToFindPage = (data) => {\r\n            history.push('/find');\r\n            // console.log(`redirected to  ${history.location.pathname}`, data);\r\n        };\r\n\r\n        if (submitSucceeded) {\r\n            login(username, password, (error, data) => {\r\n                error ? showInvalidButton(error) : redirectUserToFindPage(data);\r\n            });\r\n        }\r\n    }, [login, submitSucceeded, password, username, clearForm, history]);\r\n\r\n    const clearInvalidLoginButton = () => {\r\n        if (errorMessage) {\r\n            setErrorMessage('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <LoginGrid>\r\n            <Header as='h1' inverted size='huge' textAlign='left'>\r\n                <Icon name='braille' color='blue' />\r\n                <Header.Content>\r\n                    Mckee Pure Water\r\n                    <Header.Subheader>Version 1.0</Header.Subheader>\r\n                </Header.Content>\r\n            </Header>\r\n            <Divider />\r\n            <Divider hidden />\r\n            <LoginForm\r\n                size='large'\r\n                handleSubmit={handleSubmit((value) => {})}\r\n                iconColor={iconColor}\r\n                clearInvalidLoginButton={clearInvalidLoginButton}\r\n                errorMessage={errorMessage}\r\n                username={username}\r\n                password={password}\r\n                focusInput={focusInput}\r\n                submitSucceeded={submitSucceeded}\r\n            />\r\n            {/* <LoginDebug\r\n                username={username}\r\n                password={password}\r\n                errorMessage={errorMessage}\r\n                submitSucceeded={submitSucceeded}\r\n            /> */}\r\n        </LoginGrid>\r\n    );\r\n}\r\n\r\nLoginContainer.defaultProps = {\r\n    gridProps: {\r\n        textAlign: 'center',\r\n        style: { height: '100vh' },\r\n        verticalAlign: 'middle',\r\n    },\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    const selectFormData = formValueSelector('user');\r\n    return {\r\n        username: selectFormData(state, 'username') || '',\r\n        password: selectFormData(state, 'password') || '',\r\n        submitSucceeded: selectFormData(state, 'submitSucceeded'),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        clearForm: () => dispatch(reset('user')),\r\n        focusInput: (name) => {\r\n            document.getElementById(name).focus();\r\n        },\r\n        login: (username, password, callback) => {\r\n            // console.log('LoginForm was submitted', { username, password });\r\n            ipcRenderer.send(channels.LOGIN_USER, { username, password });\r\n\r\n            ipcRenderer.on(\r\n                channels.LOGIN_USER,\r\n                (event, { error, user_id, username }) => {\r\n                    ipcRenderer.removeAllListeners(channels.LOGIN_USER);\r\n\r\n                    if (error) {\r\n                        // console.log('response from server', { error });\r\n                        callback(error, null);\r\n                    } else {\r\n                        // console.log('response from server:', {\r\n                        //     user_id,\r\n                        //     username,\r\n                        // });\r\n                        dispatch({\r\n                            type: actionTypes.AUTHENTICATED,\r\n                            payload: user_id,\r\n                        });\r\n                        callback(error, { user_id, username });\r\n                    }\r\n                }\r\n            );\r\n        },\r\n    };\r\n};\r\n\r\nconst ReduxLoginForm = reduxForm({ form: 'user' })(LoginContainer);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxLoginForm);\r\n",["172","173"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Grid\\Grid.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\store.js",[],["174","175"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyModal.jsx",[],["176","177"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginForm.jsx",["178"],"import React from 'react';\r\nimport { Form, Divider } from 'semantic-ui-react';\r\nimport LoginButton from './LoginButton';\r\nimport Field from './LoginField';\r\nimport { string } from 'prop-types';\r\n\r\nfunction LoginForm(props) {\r\n    const {\r\n        iconColor,\r\n        clearInvalidLoginButton,\r\n        errorMessage,\r\n        username,\r\n        password,\r\n        focusInput,\r\n        submitSucceeded,\r\n        handleSubmit,\r\n        size,\r\n    } = props;\r\n    return (\r\n        <Form onSubmit={handleSubmit} size={size}>\r\n            <Field.Username\r\n                className={iconColor}\r\n                onChange={clearInvalidLoginButton}\r\n            />\r\n            <Field.Password\r\n                className={iconColor}\r\n                onChange={clearInvalidLoginButton}\r\n            />\r\n            <LoginButton\r\n                errorMessage={errorMessage}\r\n                username={username}\r\n                password={password}\r\n                focusInput={focusInput}\r\n                submitSucceeded={submitSucceeded}\r\n            />\r\n        </Form>\r\n    );\r\n}\r\n\r\nLoginForm.propTypes = {\r\n    size: string.isRequired,\r\n};\r\n\r\nLoginForm.defaultProps = {\r\n    size: 'large',\r\n};\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginButton.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\FindForm.jsx",["179","180","181","182","183","184","185","186","187","188","189","190","191"],"import React, { useState } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport {\r\n    Form,\r\n    Grid,\r\n    Input,\r\n    Button,\r\n    Message,\r\n    Icon,\r\n    Divider,\r\n    Container,\r\n    Step,\r\n} from 'semantic-ui-react';\r\nimport { reset } from 'redux-form';\r\nimport { formValueSelector } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport MemberModalButton from './FindMemberModal';\r\nimport BuyModalButton from './BuyModal';\r\nimport Proptype from 'prop-types';\r\n\r\nconst FindForm = (props) => {\r\n    const {\r\n        handleSubmit,\r\n        findForm: { submitSucceeded },\r\n        phone,\r\n        membership,\r\n        firstName,\r\n        lastName,\r\n        clearForm,\r\n        phoneProps,\r\n        history,\r\n    } = props;\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const loginUser = (values) => {\r\n        console.log('LoginForm was submitted', { values });\r\n    };\r\n\r\n    const clearErrorMessage = () => {\r\n        if (errorMessage) {\r\n            setErrorMessage('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            textAlign='center'\r\n            style={{ height: '100vh' }}\r\n            verticalAlign='middle'>\r\n            <Grid.Column style={{ maxWidth: 450 }}>\r\n                <Form onSubmit={handleSubmit(loginUser)} size='large'>\r\n                    <Field {...phoneProps} onFocus={clearErrorMessage} />\r\n                    <Field\r\n                        component={Form.Input}\r\n                        name='membership'\r\n                        placeholder='xxxxxxx'\r\n                        focus\r\n                        size='massive'\r\n                        type='text'\r\n                        fluid\r\n                        icon='address card'\r\n                        iconPosition='left'\r\n                        transparent\r\n                        inverted\r\n                        onFocus={() => setErrorMessage('')}\r\n                    />\r\n\r\n                    <Field\r\n                        component={Form.Input}\r\n                        name='firstName'\r\n                        placeholder='First Name'\r\n                        focus\r\n                        size='massive'\r\n                        type='text'\r\n                        fluid\r\n                        icon='id badge'\r\n                        iconPosition='left'\r\n                        transparent\r\n                        inverted\r\n                        onFocus={() => setErrorMessage('')}\r\n                    />\r\n                    <Field\r\n                        component={Form.Input}\r\n                        name='lastName'\r\n                        placeholder='Last Name'\r\n                        focus\r\n                        size='massive'\r\n                        type='text'\r\n                        fluid\r\n                        icon='id badge'\r\n                        iconPosition='left'\r\n                        transparent\r\n                        inverted\r\n                        onFocus={() => setErrorMessage('')}\r\n                    />\r\n                    <MemberModalButton />\r\n                    <Form.Button\r\n                        circular\r\n                        fluid\r\n                        size='massive'\r\n                        color='blue'\r\n                        content='Logout'\r\n                        icon='sign-out'\r\n                        labelPosition='right'\r\n                        onClick={(event, data) => {\r\n                            event.preventDefault();\r\n                            history.push('/');\r\n                        }}\r\n                    />\r\n                </Form>\r\n                {errorMessage ? (\r\n                    <Message icon color='pink'>\r\n                        <Icon name='circle notched' loading />\r\n                        <Message.Header>{errorMessage}</Message.Header>\r\n                    </Message>\r\n                ) : null}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nFindForm.defaultProps = {\r\n    phoneProps: {\r\n        className: 'findPhoneField',\r\n        component: Form.Input,\r\n        name: 'phone',\r\n        type: 'tel',\r\n        placeholder: '(408)-123-4567',\r\n        focus: true,\r\n        size: 'massive',\r\n        fluid: true,\r\n        icon: 'phone',\r\n        iconPosition: 'left',\r\n        transparent: true,\r\n        inverted: true,\r\n    },\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    const selectFormData = formValueSelector('find');\r\n    return {\r\n        phone: selectFormData(state, 'phone'),\r\n        membership: selectFormData(state, 'membership'),\r\n        firstName: selectFormData(state, 'firstName'),\r\n        lastName: selectFormData(state, 'lastName'),\r\n        findForm: state.form.find\r\n            ? {\r\n                  values: state.form.find.values,\r\n                  submitSucceeded: state.form.find.submitSucceeded,\r\n              }\r\n            : {},\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        clearForm: () => dispatch(reset('find')),\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(reduxForm({ form: 'find' })(FindForm));\r\n",["192","193"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\index.js",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginDebug.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Dashboard.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\App.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\Find.jsx",["194","195","196"],"import React, { useEffect, useState } from 'react';\r\nimport { reduxForm, reset, formValueSelector } from 'redux-form';\r\nimport {\r\n    TransitionablePortal,\r\n    Segment,\r\n    Divider,\r\n    Header,\r\n    Icon,\r\n} from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { channels } from '../../../shared/constants';\r\nimport FindGrid from '../Grid/Grid';\r\nimport FindForm from './FindForm';\r\nimport FindLogoutButton from './FindLogoutButton';\r\nimport DebugMessage from '../Debug/DebugMessage';\r\nimport * as actionTypes from '../../../types';\r\n\r\nconst { ipcRenderer } = window;\r\n\r\nfunction FindContainer(props) {\r\n    const {\r\n        submitSucceeded,\r\n        phone,\r\n        account,\r\n        firstName,\r\n        lastName,\r\n        clearForm,\r\n        history,\r\n        find,\r\n        focusInput,\r\n        handleSubmit,\r\n        clearFields,\r\n        membership,\r\n        clearMembership,\r\n        getAccount,\r\n    } = props;\r\n\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [iconColor, setIconColor] = useState('blueIcon');\r\n    const [open, setOpen] = useState(props.user_id ? true : false);\r\n    const [animation, setAnimation] = useState('vertical flip');\r\n    const [duration, setDuration] = useState(500);\r\n    const [closeMe, setCloseMe] = useState(false);\r\n    const [hideLogoutButton, setHideLogoutButton] = React.useState(false);\r\n    const [disableFindButton, setDisableFindButton] = useState(false);\r\n\r\n    // useEffect(() => {\r\n    //     console.log('FindContainer', { props });\r\n    // });\r\n\r\n    useEffect(() => {\r\n        if (!props.user_id) {\r\n            history.push('/');\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (closeMe) {\r\n            setDuration(0);\r\n        }\r\n    }, [closeMe, setDuration]);\r\n\r\n    useEffect(() => {\r\n        if (!phone && !account && !lastName && !firstName) {\r\n            setDisableFindButton(true);\r\n        } else {\r\n            phone.length === 8 ||\r\n            account.length === 5 ||\r\n            (firstName && lastName)\r\n                ? setDisableFindButton(false)\r\n                : setDisableFindButton(true);\r\n        }\r\n    }, [\r\n        phone,\r\n        account,\r\n        firstName,\r\n        lastName,\r\n        disableFindButton,\r\n        setDisableFindButton,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (membership.error) {\r\n            clearForm();\r\n        }\r\n    }, [clearForm, membership.error]);\r\n\r\n    return (\r\n        <TransitionablePortal\r\n            open={open}\r\n            transition={{ animation, duration }}\r\n            // onStart={() => console.log('onStart', { open })}\r\n            // onOpen={() => console.log('onOPen', { open })}\r\n            onClose={() => console.log('onClose', { open })}\r\n            onHide={() => console.log('closing trans', { open })}>\r\n            <Segment\r\n                style={{\r\n                    margin: 0,\r\n                    height: '100%',\r\n                    overflow: 'hidden',\r\n                    zIndex: 1000,\r\n                    backgroundColor: '#002b487d',\r\n                }}>\r\n                <FindGrid>\r\n                    <Header as='h1' inverted size='huge' textAlign='left'>\r\n                        <Icon name='braille' color='blue' />\r\n                        <Header.Content>\r\n                            Mckee Pure Water\r\n                            <Header.Subheader>Version 1.0</Header.Subheader>\r\n                        </Header.Content>\r\n                    </Header>\r\n                    <Divider />\r\n                    <FindForm\r\n                        getAccount={getAccount}\r\n                        setOpenFind={setOpen}\r\n                        clearMembership={clearMembership}\r\n                        membership={membership}\r\n                        find={find}\r\n                        history={history}\r\n                        disableFindButton={disableFindButton}\r\n                        clearFields={clearFields}\r\n                        hideLogoutButton={setHideLogoutButton}\r\n                        closeMe={setCloseMe}\r\n                        clearForm={clearForm}\r\n                        size='large'\r\n                        handleSubmit={handleSubmit}\r\n                        iconColor={iconColor}\r\n                        errorMessage={errorMessage}\r\n                        phone={phone}\r\n                        account={account}\r\n                        firstName={firstName}\r\n                        lastName={lastName}\r\n                        logout={() => history.push('/')}\r\n                        focusInput={focusInput}\r\n                        submitSucceeded={submitSucceeded}\r\n                        setOpen={setOpen}\r\n                    />\r\n                    <Divider hidden />\r\n                    <FindLogoutButton\r\n                        hide={hideLogoutButton}\r\n                        hideField={setHideLogoutButton}\r\n                        logout={() => {\r\n                            setOpen(false);\r\n                            clearMembership();\r\n                            history.push('/');\r\n                        }}\r\n                    />\r\n                    <DebugMessage\r\n                        membership={membership}\r\n                        phone={phone}\r\n                        account={account}\r\n                        firstName={firstName}\r\n                        lastName={lastName}\r\n                        submitSucceeded={submitSucceeded}\r\n                    />\r\n                </FindGrid>\r\n            </Segment>\r\n        </TransitionablePortal>\r\n    );\r\n}\r\n\r\nFindContainer.defaultProps = {};\r\nFindContainer.propTypes = {};\r\n\r\nconst mapStateToProps = (state) => {\r\n    const selectFormData = formValueSelector('membership');\r\n    return {\r\n        membership: state.membership,\r\n        user_id: state.auth.user_id,\r\n        phone: selectFormData(state, 'phone') || '',\r\n        account: selectFormData(state, 'account') || '',\r\n        firstName: selectFormData(state, 'firstName') || '',\r\n        lastName: selectFormData(state, 'lastName') || '',\r\n        submitSucceeded: state.form.membership\r\n            ? state.form.membership.submitSucceeded\r\n            : {},\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getAccount: (account, callback) => {\r\n            ipcRenderer.send(channels.GET_ACCOUNT, { account });\r\n\r\n            ipcRenderer.on(channels.GET_ACCOUNT, (event, response) => {\r\n                ipcRenderer.removeAllListeners(channels.GET_ACCOUNT);\r\n                // console.log(response);\r\n                dispatch({ type: actionTypes.GET_ACCOUNT, payload: response });\r\n                callback();\r\n            });\r\n        },\r\n        clearForm: () => dispatch(reset('membership')),\r\n        clearMembership: () => dispatch({ type: actionTypes.CLEAR_MEMBERSHIP }),\r\n        focusInput: (name) => {\r\n            document.getElementById(name).focus();\r\n        },\r\n        find: ({ phone, account, firstName, lastName }, callback) => {\r\n            // console.log('FindForm was submitted', {\r\n            //     phone,\r\n            //     account,\r\n            //     firstName,\r\n            //     lastName,\r\n            // });\r\n            ipcRenderer.send(channels.FIND_MEMBERSHIP, {\r\n                phone,\r\n                account,\r\n                firstName,\r\n                lastName,\r\n            });\r\n            ipcRenderer.on(channels.FIND_MEMBERSHIP, (event, response) => {\r\n                ipcRenderer.removeAllListeners(channels.FIND_MEMBERSHIP);\r\n                // console.log(response);\r\n                if (response.error) {\r\n                    dispatch({\r\n                        type: actionTypes.FIND_ERROR,\r\n                        payload: response,\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: actionTypes.FIND_MEMBERSHIP,\r\n                        payload: response,\r\n                    });\r\n                }\r\n\r\n                callback(response);\r\n            });\r\n        },\r\n    };\r\n};\r\n\r\nconst ReduxFindFrom = reduxForm({ form: 'membership' })(FindContainer);\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxFindFrom);\r\n","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindField.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindButton.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindForm.jsx",["197","198","199"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindLogoutButton.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindModal.jsx",["200"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\FindMemberModal.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\MemberRow.jsx",["201","202"],"import React from 'react';\r\nimport { List, Button } from 'semantic-ui-react';\r\nimport BuyModal from './BuyModal';\r\n\r\nconst MemberRow = (props) => {\r\n    const [open, openBuyModal] = React.useState(false);\r\n    const { close } = props;\r\n\r\n    return (\r\n        <List verticalAlign='middle' size='large' inverted>\r\n            <List.Item>\r\n                <List.Content floated='right'>\r\n                    {/* <BuyModal\r\n                        setOpen={openBuyModal}\r\n                        open={open}\r\n                        closeOnDimmerClick={false}\r\n                        closeOnEscape={false}\r\n                        hideField={props.hideField}\r\n                        hideMemberRow={props.hideRow}\r\n                    /> */}\r\n\r\n                    {!props.hide ? (\r\n                        <>\r\n                            <Button\r\n                                circular\r\n                                size='large'\r\n                                color='pink'\r\n                                content='Buy'\r\n                                labelPosition='right'\r\n                                icon='plus cart'\r\n                                onClick={() => {\r\n                                    openBuyModal(true);\r\n                                    props.hideRow(true);\r\n                                    props.history.push('/buy');\r\n                                }}\r\n                            />\r\n                            <Button\r\n                                circular\r\n                                size='large'\r\n                                color='facebook'\r\n                                content='Renew'\r\n                                labelPosition='right'\r\n                                icon='redo'\r\n                            />\r\n                            <Button\r\n                                circular\r\n                                size='large'\r\n                                color='twitter'\r\n                                content='Edit'\r\n                                labelPosition='right'\r\n                                icon='edit'\r\n                            />\r\n                            <Button\r\n                                circular\r\n                                size='large'\r\n                                color='grey'\r\n                                content='Invoice'\r\n                                labelPosition='right'\r\n                                icon='sticky note'\r\n                            />\r\n                            <Button\r\n                                circular\r\n                                size='large'\r\n                                color='red'\r\n                                content='Done'\r\n                                labelPosition='right'\r\n                                icon='close'\r\n                                onClick={close}\r\n                            />\r\n                        </>\r\n                    ) : null}\r\n                </List.Content>\r\n                <List.Content>\r\n                    {!props.hide ? (\r\n                        <>\r\n                            <Button\r\n                                circular\r\n                                inverted\r\n                                size='large'\r\n                                color='grey'\r\n                                content='302039'\r\n                                icon='gg'\r\n                            />\r\n                            <Button\r\n                                inverted\r\n                                circular\r\n                                color='grey'\r\n                                size='large'\r\n                                content='Hung Quach'\r\n                                icon='user'\r\n                            />\r\n                            <Button\r\n                                circular\r\n                                inverted\r\n                                size='large'\r\n                                color='grey'\r\n                                content='Gallon Remain'\r\n                                icon='flask'\r\n                                label={{\r\n                                    basic: true,\r\n                                    color: 'blue',\r\n                                    content: '50',\r\n                                }}\r\n                            />\r\n                        </>\r\n                    ) : null}\r\n                </List.Content>\r\n            </List.Item>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default MemberRow;\r\n",["203","204"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindMembershipButton.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\types.js",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindModalHeader.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindModalCloseButton.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindAccountInput.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindNameInput.jsx",["205"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Membership\\Membership.jsx",["206","207","208","209","210","211","212","213","214","215","216"],"import React, { useEffect, useState } from 'react';\r\nimport { reduxForm, reset, formValueSelector } from 'redux-form';\r\nimport { TransitionablePortal, Segment, Button, Grid } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { channels } from '../../../shared/constants';\r\nimport FindGrid from '../Grid/Grid';\r\nimport MemberRow from '../MemberRow';\r\nimport BuyForm from '../BuyForm';\r\nconst { ipcRenderer } = window;\r\n\r\nfunction FindContainer(props) {\r\n    const { phone, account, firstName, lastName, history } = props;\r\n\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [iconColor, setIconColor] = useState('blueIcon');\r\n    const [open, setOpen] = useState(props.user_id ? true : false);\r\n    const [animation, setAnimation] = useState('vertical flip');\r\n    // const [animation, setAnimation] = useState('fade');\r\n    const [duration, setDuration] = useState(800);\r\n    const [closeMe, setCloseMe] = useState(false);\r\n    const [hideLogoutButton, setHideLogoutButton] = React.useState(false);\r\n    const [disableFindButton, setDisableFindButton] = useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log('FindContainer', { props });\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!props.user_id) {\r\n            history.push('/');\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (closeMe) {\r\n            setDuration(0);\r\n        }\r\n    }, [closeMe, setDuration]);\r\n\r\n    useEffect(() => {\r\n        if (!phone && !account && !lastName && !firstName) {\r\n            setDisableFindButton(true);\r\n        } else {\r\n            phone.length === 8 ||\r\n            account.length === 5 ||\r\n            (firstName && lastName)\r\n                ? setDisableFindButton(false)\r\n                : setDisableFindButton(true);\r\n        }\r\n    }, [\r\n        phone,\r\n        account,\r\n        firstName,\r\n        lastName,\r\n        disableFindButton,\r\n        setDisableFindButton,\r\n    ]);\r\n\r\n    return (\r\n        <TransitionablePortal\r\n            open={open}\r\n            transition={{ animation, duration }}\r\n            onStart={() => console.log('onStart', { open })}\r\n            onHide={() => console.log('closing trans', { open })}>\r\n            <Segment\r\n                style={{\r\n                    margin: 0,\r\n                    height: '100%',\r\n                    overflow: 'hidden',\r\n                    zIndex: 1000,\r\n                    backgroundColor: '#002b487d',\r\n                }}>\r\n                <Grid style={{ height: '100vh' }} verticalAlign='middle'>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            {/* <MemberRow /> */}\r\n                            <Segment inverted raised color='blue'>\r\n                                <BuyForm />\r\n                                <MemberRow />\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Segment>\r\n        </TransitionablePortal>\r\n    );\r\n}\r\n\r\nFindContainer.defaultProps = {};\r\nFindContainer.propTypes = {};\r\n\r\nconst mapStateToProps = (state) => {\r\n    const selectFormData = formValueSelector('membership');\r\n    return {\r\n        user_id: state.auth.user_id,\r\n        phone: selectFormData(state, 'phone') || '',\r\n        account: selectFormData(state, 'account') || '',\r\n        firstName: selectFormData(state, 'firstName') || '',\r\n        lastName: selectFormData(state, 'lastName') || '',\r\n        submitSucceeded: state.form.membership\r\n            ? state.form.membership.submitSucceeded\r\n            : {},\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        clearForm: () => dispatch(reset('membership')),\r\n        focusInput: (name) => {\r\n            document.getElementById(name).focus();\r\n        },\r\n        find: ({ phone, account, firstName, lastName }) => {\r\n            console.log('FindForm was submitted', {\r\n                phone,\r\n                account,\r\n                firstName,\r\n                lastName,\r\n            });\r\n            ipcRenderer.send(channels.FIND_MEMBERSHIP, {\r\n                phone,\r\n                account,\r\n                firstName,\r\n                lastName,\r\n            });\r\n        },\r\n    };\r\n};\r\n\r\nconst ReduxFindFrom = reduxForm({ form: 'membership' })(FindContainer);\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxFindFrom);\r\n","C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Debug\\DebugMessage.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\reducers.js",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Login\\LoginField.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Grid\\FindPhoneInput.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Portal\\BuyPortal.jsx",["217","218","219","220","221"],"import React, { useState } from 'react';\r\nimport { TransitionablePortal, Segment, Grid, Button } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../../types';\r\nimport BuyForm from '../BuyForm';\r\n\r\nconst BuyPortal = (props) => {\r\n    const { membership, clearMembership } = props;\r\n    const [open, setOpenPortal] = useState(true);\r\n    const [hideField, setHideField] = useState(false);\r\n    const [hide, setHide] = React.useState(false);\r\n\r\n    const handleClose = () => {\r\n        setOpenPortal(false);\r\n        // clearMembership();\r\n        // props.history.push('/find');\r\n        // props.history.push('/portal');\r\n        props.history.push('/member');\r\n    };\r\n    return (\r\n        <TransitionablePortal onClose={handleClose} open={open}>\r\n            <Segment\r\n                style={{\r\n                    bottom: '0px',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'fixed',\r\n                    zIndex: 1000,\r\n                    backgroundColor: '#002b487d',\r\n                }}>\r\n                <Grid style={{ height: '100vh' }} verticalAlign='middle'>\r\n                    <Grid.Column>\r\n                        <BuyForm />\r\n                        <Button\r\n                            circular\r\n                            size='huge'\r\n                            floated='right'\r\n                            secondary\r\n                            onClick={handleClose}\r\n                            content='Cancel'\r\n                            labelPosition='right'\r\n                            icon='delete'\r\n                        />\r\n                        <Button\r\n                            circular\r\n                            size='huge'\r\n                            primary\r\n                            floated='right'\r\n                            onClick={handleClose}\r\n                            content='Buy'\r\n                            labelPosition='right'\r\n                            icon='right chevron'\r\n                        />\r\n                        <pre>{JSON.stringify(membership, null, 2)}</pre>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </TransitionablePortal>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        membership: state.membership,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        clearMembership: () => dispatch({ type: actionTypes.CLEAR_MEMBERSHIP }),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BuyPortal);\r\n",["222","223"],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyInput.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\BuyForm.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Portal\\MembershipPortal.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Find\\FindFormButton.jsx",[],"C:\\Users\\hungq\\Development\\electron-cra-example-master\\src\\react\\components\\Portal\\AccountPortal.jsx",["224"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Message, Form, Container, Divider } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport * as actionTypes from '../../../types';\r\nimport { channels } from '../../../shared/constants';\r\n\r\nconst { ipcRenderer } = window;\r\n\r\nconst getCurrentTime = () => {\r\n    const time = new Date();\r\n    return time.toLocaleString('en-US', {\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n        second: 'numeric',\r\n        hour12: true,\r\n    });\r\n};\r\n\r\nconst currentDate = () => {\r\n    const currentdate = new Date();\r\n    const datetime =\r\n        currentdate.getMonth() +\r\n        1 +\r\n        '/' +\r\n        currentdate.getDate() +\r\n        '/' +\r\n        currentdate.getFullYear();\r\n\r\n    return datetime;\r\n};\r\n\r\nconst AccountPortal = (props) => {\r\n    const { getAccountInvoices, account, detail, printReceipt } = props;\r\n    const [invoices, setInvoices] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // BUY DATA\r\n    const [overLimit, setOverLimit] = useState(\r\n        parseInt(detail.afterBuyGallonTotal) > 0 ? 0 : detail.overGallon\r\n    );\r\n    const [buyGallon, setBuyGallon] = useState(0);\r\n    const [gallonLeft, setGallonLeft] = useState(detail.afterBuyGallonTotal);\r\n    const [receipt, setReceipt] = useState({\r\n        prevGallon: detail.afterBuyGallonTotal,\r\n        buyGallon: buyGallon,\r\n        gallonLeft: gallonLeft,\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(`Buy Data`, { buyGallon, gallonLeft, overLimit });\r\n        if (overLimit < 0) {\r\n            setGallonLeft(0);\r\n        }\r\n        if (buyGallon === '') {\r\n            setGallonLeft(detail.afterBuyGallonTotal);\r\n        }\r\n        if (parseInt(buyGallon) === parseInt(detail.afterBuyGallonTotal)) {\r\n            setOverLimit(0);\r\n            setGallonLeft(0);\r\n        }\r\n    }, [buyGallon, gallonLeft, overLimit, detail, receipt]);\r\n\r\n    return (\r\n        <Container style={{ width: '1400px' }}>\r\n            <Form size='huge'>\r\n                <Field\r\n                    name='todayDate'\r\n                    component={Form.Input}\r\n                    width={3}\r\n                    label='Today Date'\r\n                />\r\n                <Field\r\n                    name='todayTime'\r\n                    component={Form.Input}\r\n                    width={3}\r\n                    label='Time'\r\n                />\r\n                <Field\r\n                    name='account'\r\n                    width={2}\r\n                    component={Form.Input}\r\n                    label='Account'\r\n                />\r\n                <Field\r\n                    name='areaCode'\r\n                    width={2}\r\n                    component={Form.Input}\r\n                    label='Area Code'\r\n                />\r\n                <Field\r\n                    name='phone'\r\n                    type='phone'\r\n                    width={3}\r\n                    component={Form.Input}\r\n                    label='Phone Number'\r\n                />\r\n                <Field\r\n                    name='firstName'\r\n                    width={2}\r\n                    component={Form.Input}\r\n                    label='First Name'\r\n                />\r\n                <Field\r\n                    name='lastName'\r\n                    width={2}\r\n                    component={Form.Input}\r\n                    label='Last Name'\r\n                />\r\n                <Field\r\n                    name='fullname'\r\n                    width={2}\r\n                    component={Form.Input}\r\n                    label='FullName'\r\n                />\r\n                <Field\r\n                    readOnly\r\n                    name='prevGallon'\r\n                    width={2}\r\n                    component={Form.Input}\r\n                    label='Previous Gallon'\r\n                />\r\n\r\n                <Form.Input\r\n                    // type='number'\r\n                    min='0'\r\n                    name='buy'\r\n                    width={2}\r\n                    value={buyGallon ? buyGallon.toString() : buyGallon}\r\n                    label='Buy Gallon'\r\n                    onChange={(e, { value }) => {\r\n                        console.log(value, e);\r\n\r\n                        if (isNaN(parseInt(value))) {\r\n                            console.log(value);\r\n                            setBuyGallon('');\r\n                            setOverLimit(0);\r\n                        }\r\n                        const buyValue = parseInt(value, 10);\r\n                        if (buyValue > detail.afterBuyGallonTotal) {\r\n                            setOverLimit(detail.afterBuyGallonTotal - buyValue);\r\n                            setBuyGallon(buyValue);\r\n                        } else {\r\n                            if (\r\n                                buyValue < detail.afterBuyGallonTotal ||\r\n                                buyValue === 0\r\n                            ) {\r\n                                setOverLimit(0);\r\n                            }\r\n                            if (\r\n                                buyValue >= 0 &&\r\n                                buyValue <= detail.afterBuyGallonTotal\r\n                            ) {\r\n                                setBuyGallon((prev) => {\r\n                                    if (buyValue === 0 || buyValue === '') {\r\n                                        setGallonLeft(\r\n                                            detail.afterBuyGallonTotal\r\n                                        );\r\n                                    } else {\r\n                                        if (\r\n                                            buyValue <\r\n                                            detail.afterBuyGallonTotal\r\n                                        )\r\n                                            setGallonLeft(\r\n                                                detail.afterBuyGallonTotal -\r\n                                                    buyValue\r\n                                            );\r\n                                        if (\r\n                                            buyValue >\r\n                                            detail.afterBuyGallonTotal\r\n                                        )\r\n                                            setGallonLeft(\r\n                                                buyValue -\r\n                                                    detail.afterBuyGallonTotal\r\n                                            );\r\n\r\n                                        if (\r\n                                            buyValue ===\r\n                                            detail.afterBuyGallonTotal\r\n                                        ) {\r\n                                            setGallonLeft(0);\r\n                                        }\r\n                                    }\r\n                                    setBuyGallon(parseInt(value));\r\n                                });\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n                <Form.Input\r\n                    error={gallonLeft === 0 || gallonLeft < 0 ? true : false}\r\n                    width={2}\r\n                    readOnly\r\n                    name='GallonLeft'\r\n                    value={gallonLeft}\r\n                    label='Gallon Left'\r\n                />\r\n                <Form.Input\r\n                    readOnly\r\n                    error={overLimit < 0 ? true : false}\r\n                    name='over'\r\n                    width={2}\r\n                    value={overLimit}\r\n                    label='Over Gallon'\r\n                    onChange={(e, { value }) => {\r\n                        setOverLimit(value);\r\n                    }}\r\n                />\r\n            </Form>\r\n            <Divider />\r\n            <Button\r\n                onClick={() => {\r\n                    if (props.membership.members) {\r\n                        props.history.push('/member');\r\n                    } else {\r\n                        props.history.push('find');\r\n                    }\r\n                }}>\r\n                Back\r\n            </Button>\r\n            <Button\r\n                loading={loading}\r\n                onClick={() => {\r\n                    console.log(account);\r\n                    setLoading(true);\r\n                    getAccountInvoices(account, (data) => {\r\n                        console.log(data);\r\n                        setLoading(false);\r\n                        setInvoices(data);\r\n                    });\r\n                }}>\r\n                Get Invoice\r\n            </Button>\r\n            <Button\r\n                loading={loading}\r\n                onClick={() => {\r\n                    console.log(account);\r\n                    setLoading(true);\r\n                    getAccountInvoices(account, (data) => {\r\n                        console.log(data);\r\n                        setLoading(false);\r\n                        setInvoices(data);\r\n                    });\r\n                }}>\r\n                Renew Membership\r\n            </Button>\r\n            <Button\r\n                content='Buy'\r\n                onClick={() => {\r\n                    const receipt = {\r\n                        // prevGallon: detail.gallonRemain,\r\n                        prevGallon: detail.afterBuyGallonTotal,\r\n                        buyGallon,\r\n                        gallonLeft,\r\n                        overLimit,\r\n                        account,\r\n                        detail,\r\n                        timestamp: currentDate() + '-' + getCurrentTime(),\r\n                    };\r\n\r\n                    printReceipt(receipt);\r\n                }}\r\n            />\r\n            <Message>\r\n                <Message.Content>\r\n                    <pre>{JSON.stringify(account || [], null, 2)}</pre>\r\n                    <pre>{JSON.stringify(detail || [], null, 2)}</pre>\r\n                    <pre>{JSON.stringify(invoices || [], null, 2)}</pre>\r\n                </Message.Content>\r\n            </Message>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    const {\r\n        account,\r\n        areaCode,\r\n        firstName,\r\n        phone,\r\n        fullname,\r\n        gallonBuy,\r\n        gallonCurrent,\r\n        gallonRemain,\r\n        invoiceDate,\r\n        invoiceTime,\r\n        lastName,\r\n        lastRenewGallon,\r\n        memberSince,\r\n        overGallon,\r\n        record_id,\r\n        renew,\r\n        renewFee,\r\n        afterBuyGallonTotal,\r\n    } = state.account;\r\n    return {\r\n        initialValues: {\r\n            account,\r\n            areaCode,\r\n            firstName,\r\n            phone,\r\n            fullname,\r\n            gallonBuy,\r\n            gallonCurrent,\r\n            gallonRemain,\r\n            invoiceDate,\r\n            invoiceTime,\r\n            lastName,\r\n            lastRenewGallon,\r\n            memberSince,\r\n\r\n            // prevGallon: parseInt(gallonRemain) || 0,\r\n            prevGallon: parseInt(afterBuyGallonTotal) || 0,\r\n            // overGallon:\r\n            //     parseInt(overGallon) === parseInt(gallonRemain)\r\n            //         ? 0\r\n            //         : overGallon,\r\n            overGallon:\r\n                parseInt(overGallon) === parseInt(afterBuyGallonTotal)\r\n                    ? 0\r\n                    : overGallon,\r\n\r\n            record_id,\r\n            renew,\r\n            renewFee,\r\n            todayDate: currentDate(),\r\n            todayTime: getCurrentTime(),\r\n        },\r\n        membership: state.membership,\r\n        account: state.account.account,\r\n        detail: state.account,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        printReceipt: (receipt, callback) => {\r\n            ipcRenderer.send(channels.PRINT_RECEIPT, { receipt });\r\n\r\n            ipcRenderer.on(channels.PRINT_RECEIPT, (event, args) => {\r\n                // const { done } = args;\r\n                ipcRenderer.removeAllListeners(channels.PRINT_RECEIPT);\r\n                // callback(done);\r\n            });\r\n        },\r\n        getAccountInvoices: (account, callback) => {\r\n            ipcRenderer.send(channels.GET_MEMBER_INVOICES, {\r\n                account,\r\n            });\r\n            ipcRenderer.on(channels.GET_MEMBER_INVOICES, (event, args) => {\r\n                ipcRenderer.removeAllListeners(channels.GET_MEMBER_INVOICES);\r\n                console.log({ args });\r\n                dispatch({\r\n                    type: actionTypes.GET_MEMBER_INVOICES,\r\n                    payload: args,\r\n                });\r\n                callback(args);\r\n            });\r\n        },\r\n    };\r\n};\r\n\r\nconst ReduxForm = reduxForm({ form: 'buy' })(AccountPortal);\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxForm);\r\n",{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":6,"column":8,"nodeType":"231","messageId":"232","endLine":6,"endColumn":18},{"ruleId":"225","replacedBy":"233"},{"ruleId":"227","replacedBy":"234"},{"ruleId":"225","replacedBy":"235"},{"ruleId":"227","replacedBy":"236"},{"ruleId":"225","replacedBy":"237"},{"ruleId":"227","replacedBy":"238"},{"ruleId":"229","severity":1,"message":"239","line":2,"column":16,"nodeType":"231","messageId":"232","endLine":2,"endColumn":23},{"ruleId":"229","severity":1,"message":"240","line":6,"column":5,"nodeType":"231","messageId":"232","endLine":6,"endColumn":10},{"ruleId":"229","severity":1,"message":"241","line":7,"column":5,"nodeType":"231","messageId":"232","endLine":7,"endColumn":11},{"ruleId":"229","severity":1,"message":"239","line":10,"column":5,"nodeType":"231","messageId":"232","endLine":10,"endColumn":12},{"ruleId":"229","severity":1,"message":"242","line":11,"column":5,"nodeType":"231","messageId":"232","endLine":11,"endColumn":14},{"ruleId":"229","severity":1,"message":"243","line":12,"column":5,"nodeType":"231","messageId":"232","endLine":12,"endColumn":9},{"ruleId":"229","severity":1,"message":"244","line":18,"column":8,"nodeType":"231","messageId":"232","endLine":18,"endColumn":22},{"ruleId":"229","severity":1,"message":"245","line":19,"column":8,"nodeType":"231","messageId":"232","endLine":19,"endColumn":16},{"ruleId":"229","severity":1,"message":"246","line":24,"column":21,"nodeType":"231","messageId":"232","endLine":24,"endColumn":36},{"ruleId":"229","severity":1,"message":"247","line":25,"column":9,"nodeType":"231","messageId":"232","endLine":25,"endColumn":14},{"ruleId":"229","severity":1,"message":"248","line":26,"column":9,"nodeType":"231","messageId":"232","endLine":26,"endColumn":19},{"ruleId":"229","severity":1,"message":"249","line":27,"column":9,"nodeType":"231","messageId":"232","endLine":27,"endColumn":18},{"ruleId":"229","severity":1,"message":"250","line":28,"column":9,"nodeType":"231","messageId":"232","endLine":28,"endColumn":17},{"ruleId":"229","severity":1,"message":"251","line":29,"column":9,"nodeType":"231","messageId":"232","endLine":29,"endColumn":18},{"ruleId":"225","replacedBy":"252"},{"ruleId":"227","replacedBy":"253"},{"ruleId":"229","severity":1,"message":"254","line":38,"column":26,"nodeType":"231","messageId":"232","endLine":38,"endColumn":41},{"ruleId":"229","severity":1,"message":"255","line":39,"column":23,"nodeType":"231","messageId":"232","endLine":39,"endColumn":35},{"ruleId":"229","severity":1,"message":"256","line":41,"column":23,"nodeType":"231","messageId":"232","endLine":41,"endColumn":35},{"ruleId":"229","severity":1,"message":"257","line":2,"column":25,"nodeType":"231","messageId":"232","endLine":2,"endColumn":35},{"ruleId":"229","severity":1,"message":"258","line":4,"column":8,"nodeType":"231","messageId":"232","endLine":4,"endColumn":22},{"ruleId":"229","severity":1,"message":"259","line":17,"column":23,"nodeType":"231","messageId":"232","endLine":17,"endColumn":35},{"ruleId":"229","severity":1,"message":"260","line":18,"column":9,"nodeType":"231","messageId":"232","endLine":18,"endColumn":16},{"ruleId":"229","severity":1,"message":"261","line":3,"column":8,"nodeType":"231","messageId":"232","endLine":3,"endColumn":16},{"ruleId":"229","severity":1,"message":"262","line":6,"column":12,"nodeType":"231","messageId":"232","endLine":6,"endColumn":16},{"ruleId":"225","replacedBy":"263"},{"ruleId":"227","replacedBy":"264"},{"ruleId":"229","severity":1,"message":"265","line":74,"column":10,"nodeType":"231","messageId":"232","endLine":74,"endColumn":14},{"ruleId":"229","severity":1,"message":"241","line":3,"column":41,"nodeType":"231","messageId":"232","endLine":3,"endColumn":47},{"ruleId":"229","severity":1,"message":"266","line":6,"column":8,"nodeType":"231","messageId":"232","endLine":6,"endColumn":16},{"ruleId":"229","severity":1,"message":"267","line":14,"column":12,"nodeType":"231","messageId":"232","endLine":14,"endColumn":24},{"ruleId":"229","severity":1,"message":"254","line":14,"column":26,"nodeType":"231","messageId":"232","endLine":14,"endColumn":41},{"ruleId":"229","severity":1,"message":"268","line":15,"column":12,"nodeType":"231","messageId":"232","endLine":15,"endColumn":21},{"ruleId":"229","severity":1,"message":"255","line":15,"column":23,"nodeType":"231","messageId":"232","endLine":15,"endColumn":35},{"ruleId":"229","severity":1,"message":"269","line":16,"column":18,"nodeType":"231","messageId":"232","endLine":16,"endColumn":25},{"ruleId":"229","severity":1,"message":"256","line":17,"column":23,"nodeType":"231","messageId":"232","endLine":17,"endColumn":35},{"ruleId":"229","severity":1,"message":"270","line":20,"column":21,"nodeType":"231","messageId":"232","endLine":20,"endColumn":31},{"ruleId":"229","severity":1,"message":"271","line":21,"column":12,"nodeType":"231","messageId":"232","endLine":21,"endColumn":28},{"ruleId":"229","severity":1,"message":"272","line":21,"column":30,"nodeType":"231","messageId":"232","endLine":21,"endColumn":49},{"ruleId":"229","severity":1,"message":"273","line":8,"column":25,"nodeType":"231","messageId":"232","endLine":8,"endColumn":40},{"ruleId":"229","severity":1,"message":"274","line":10,"column":12,"nodeType":"231","messageId":"232","endLine":10,"endColumn":21},{"ruleId":"229","severity":1,"message":"259","line":10,"column":23,"nodeType":"231","messageId":"232","endLine":10,"endColumn":35},{"ruleId":"229","severity":1,"message":"275","line":11,"column":12,"nodeType":"231","messageId":"232","endLine":11,"endColumn":16},{"ruleId":"229","severity":1,"message":"276","line":11,"column":18,"nodeType":"231","messageId":"232","endLine":11,"endColumn":25},{"ruleId":"225","replacedBy":"277"},{"ruleId":"227","replacedBy":"278"},{"ruleId":"229","severity":1,"message":"279","line":44,"column":21,"nodeType":"231","messageId":"232","endLine":44,"endColumn":31},"no-native-reassign",["280"],"no-negated-in-lhs",["281"],"no-unused-vars","'LoginDebug' is defined but never used.","Identifier","unusedVar",["280"],["281"],["280"],["281"],["280"],["281"],"'Divider' is defined but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","'Step' is defined but never used.","'BuyModalButton' is defined but never used.","'Proptype' is defined but never used.","'submitSucceeded' is assigned a value but never used.","'phone' is assigned a value but never used.","'membership' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'clearForm' is assigned a value but never used.",["280"],["281"],"'setErrorMessage' is assigned a value but never used.","'setIconColor' is assigned a value but never used.","'setAnimation' is assigned a value but never used.","'Transition' is defined but never used.","'FindFormButton' is defined but never used.","'setHideField' is assigned a value but never used.","'history' is assigned a value but never used.","'BuyModal' is defined but never used.","'open' is assigned a value but never used.",["280"],["281"],"'name' is defined but never used.","'FindGrid' is defined but never used.","'errorMessage' is assigned a value but never used.","'iconColor' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'setCloseMe' is assigned a value but never used.","'hideLogoutButton' is assigned a value but never used.","'setHideLogoutButton' is assigned a value but never used.","'clearMembership' is assigned a value but never used.","'hideField' is assigned a value but never used.","'hide' is assigned a value but never used.","'setHide' is assigned a value but never used.",["280"],["281"],"'setReceipt' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]